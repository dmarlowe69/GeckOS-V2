/****************************************************************************
   
    OS/A65 Version 2.0.0
    Multitasking Operating System for 6502 Computers
    Generic console device

    Copyright (C) 1989-1998 Andre Fachat 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

****************************************************************************/


/*************************************************************************
 *
 * Generic Device handling
 *
 * provides:
 *
 *	gen_dev
 *		general DEVCMD handling
 *		calls:
 *		- dev_reset (if defined)
 *		- dev_timer (if defined)
 *		- dev_irq (if defined)
 *
 *	gen_tx_check
 *		checks if we send 
 *		returns c=0 if data availble
 *		calls txoff if stream is closed
 *		(note: potential optimization - directly return first char)
 *
 *	gen_rx_check
 *		check if we receive
 *		calls rxoff if write stream is closed
 *
 *	rxoff
 *		switches off receiving 
 */

	.data
curdev	.byt 0

status    .dsb MAX_SCREEN
outstr    .dsb MAX_SCREEN
getstr    .dsb MAX_SCREEN
brkkey    .dsb MAX_SCREEN
	.text

	.(

&gen_tx_check .(
	ldx curdev
	lda status,x
	and #DC_SW_TX	; do we send?
	beq endtx

	lda getstr,x
	tax
	lda #SC_STAT
	jsr STRCMD	; check stream state
	cmp #E_EOF
	bne txok
	jsr txoff
	jmp endtx
txok
	cmp #E_SEMPTY
	beq endtx
	clc
	rts
endtx	sec
	rts
	.)

&gen_rx_check .(
	lda status,y
	and #DC_SW_RX
	beq nocheck

	ldx outstr,y
	lda #SC_STAT
	jsr STRCMD
	cmp #E_NUL
	bne nocheck
	jsr rxoff
nocheck	rts
	.)

&gen_dev  .(
	  ; generic reset
	  cpx #MAX_DEVICE
	  bcs max_err
	  stx curdev

          cmp #DC_RES
          bne p1

	  lda #3		; ^C
	  sta brkkey,x

          lda #0		; linein off ; DC_SW_MOD	; linein ein
          sta status,x
          sta ctrlst,x

          sta outstr,x
          sta getstr,x

#ifldef dev_reset
	jmp dev_reset
#else
	rts
#endif
	.)

max_err  lda #E_NODEV
	  sec
	  rts

p1	.(
	; check if device is active
	  pha
          lda status,x
          and #DC_SW_EXIT
          beq p1ok
          pla
          sec
          rts

p1ok      pla

          cmp #DC_IRQ
	  bne p2t
#ifldef dev_irq
	jmp dev_irq
#else
	rts
#endif
p2t	  cmp #DC_TIMER
          bne p2
#ifldef dev_timer
	jmp dev_timer
#else
	rts
#endif
	.)

p2        .(
          cmp #DC_TX_ON
          bne ox1q
	ldy curdev
	lda #0
	sta ctrlst,y
	jsr towcl
          lda #DC_SW_TX
          bne ox1q1
ox1q      cmp #DC_RX_ON
          bne ox1
	  ; ldy curdev
	  ; lda #3
	  ; sta brkkey,y
          lda #DC_SW_RX
ox1q1     ldy curdev
          ora status,y
          sta status,y
          jmp ok
ox1       cmp #DC_TX_OFF
          bne ox2x
&txoff    ldy curdev
          lda status,y
          and #DC_SW_TX
          beq devoff
          ldx getstr,y
          lda #SC_NUL
          jsr STRCMD
          lda status,y
          and #255-DC_SW_TX
          sta status,y
          jmp ok          
ox2x      cmp #DC_RX_OFF
          bne ox2
&&rxoff   ldy curdev
          lda status,y
          and #DC_SW_RX
          beq devoff
          ldx outstr,y
          lda #SC_EOF
          jsr STRCMD
          lda status,y
          and #255-DC_SW_RX
          sta status,y
          jmp ok
ox2       cmp #DC_EXIT
          bne ox2a
          jsr rxoff
          jsr txoff
          ldy curdev
          lda #DC_SW_EXIT
          ora status,y
          sta status,y
          bne ok
ox2a      cmp #DC_ST
          bne o3
ok        lda #E_OK
          .byt $2c
devoff    lda #E_DOFF
          .byt $2c
devon     lda #E_DON
          .byt $2c
notimp    lda #E_NOTIMP
          cmp #1
          rts
o3        cmp #DC_PS
          bne o4
          ldx curdev
          lda status,x
          and #DC_SW_RX
          bne devon
          tya
          sta outstr,x
          jmp ok
o4        cmp #DC_SPD
          bne o5
          sty rspd
          beq ok
o5        cmp #DC_GS
          bne o6		; notimp
          ldx curdev
          lda status,x
          and #DC_SW_TX
          bne devon
          tya
          sta getstr,x
          jmp ok
o6	  cmp #DC_BRKKEY
	  bne notimp
	  ldx curdev
	  lda brkkey,x
	  pha
	  tya
	  sta brkkey,x
	  pla
	  tay
	  jmp ok
          .)

	.)

/**************************************************************************/


