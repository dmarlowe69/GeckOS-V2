
/****************************************************************************
   
    OS/A65 Version 2.0.0
    Multitasking Operating System for 6502 Computers

    Copyright (C) 1989-1998 Andre Fachat 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

****************************************************************************/

#define	CHECK_C128

#define	MAX_SCREEN	3		/* hard maximum number of screens */

#define	MAX_ASCREEN	#3		/* soft maximum number of screens */

#define	SWITCHKEY	61

#define	SET_MMU

#define	BELLIRQ	

#define	TRIGBELL	

#define	MAXSPAL		#40

#define	MAXZEIL		#25

#define	KEY_START	20	/* when does key repetition start */

				/* screen# -> hi byte of base address in AC */
#define	HI_VID	        asl:asl:clc:adc #VIDPAGE

#define	ACT_HI_VID      lda hivid

#define	SCR_SPACE	32

#define	SCR2ASC

#define	ASC2SCR

console_init .(
	jsr inivid
	jsr inicrsr
	jsr inikbd
	rts
	.)

/*
 * For the C64 we put the video screen memory to $e000-$ec00, i.e.
 * we have three possible screens only. We need $ec00-$efff for the
 * stdlib. We use the std charom at $d000 in the RAM under I/O that
 * the VIC doesn't see. The boot loader has to copy the charom there.
 * Then we have all the memory below the I/O relatively free.
 */

inivid	.(
        lda #0
        sta C64VIC+VIC_IRR            ; no interrupts
        sta C64VIC+VIC_SPRITE_EN      ; sprites off
        lda #27
        sta C64VIC+VIC_CR1            ; 25 lines
        lda #8
        sta C64VIC+VIC_CR2            ; 40 cols
;       lda #(($10 & %001110000)>>2)+(($20 & %00111100)<<2)
;       lda #%10000100
#print (($d0 & %00111000) >> 2) + ((VIDPAGE & %00111100)<< 2)
	lda #(($d0 & %00111000) >> 2) + ((VIDPAGE & %00111100)<< 2)
        sta C64VIC+VIC_BASE           ; character and screen base

        lda C64CIA2+CIA_DDRA          ; set upper two video address bits
        ora #3                        ; via CIA2, PRA Bit 0 and 1
        sta C64CIA2+CIA_DDRA          ; set bits to output mode
        lda C64CIA2+CIA_PRA
        and #%11111100
	ora #3-((VIDPAGE & %11000000) >> 6)
        sta C64CIA2+CIA_PRA           ; change to uppermost page ($c000-)

        lda #C64_TEXT_COL             ; set the screen (text) color
        ldy #0
coloop  sta $d800,y
        sta $d900,y
        sta $da00,y
        sta $db00,y
        iny
        bne coloop

        lda #C64_BGND_COL             ; set the border and background color
        sta C64VIC+VIC_BGND_COL0
        lda #C64_BORDER_COL
        sta C64VIC+VIC_EXT_COL
	rts
	.)

setact	.(
        asl
        asl
        asl
        asl
        ;ora #%10000100
	ora #(($d0 & %00111000) >> 2) + ((VIDPAGE & %00111100)<< 2)
        sta C64VIC+VIC_BASE
	rts
	.)

/**************************************************************************
 * Cursor handling
 */

          .(
        .data
crsrfl  .byt 0
crsrcnt .byt 0
        .text

&inicrsr
	lda #0
	sta crsrfl
	sta crsrcnt
	rts

&crsroff .(                    ; disable cursor
          bit crsrfl
          bpl ret               ; not enabled

          bit crsrfl
          bvc clr               ; not inversed
          ldy spalte
          lda (vzei),y
          eor #$80
          sta (vzei),y
clr       lda #0
          sta crsrfl
&ret      rts
	.)

&crsron .(			; enable cursor
          bit crsrfl
          bmi irq               ; already enabled
          lda #0                ; inverse cursor next crsrirq
          sta crsrcnt
          lda #128              ; enabled, but not invers
          sta crsrfl

&irq      
	  dec crsrcnt
          bpl ret               ; not this time
          lda #10
          sta crsrcnt

          ldy spalte
          lda (vzei),y
          eor #$80
          sta (vzei),y
          lda crsrfl
          eor #$40
          sta crsrfl

          rts
          .)

	.)

/**************************************************************************/

#include "devices/con_gen_mmap.a65"

#include "devices/kbd_c64.a65"

