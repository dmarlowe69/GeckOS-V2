/****************************************************************************
   
    OS/A65 Version 2.0.0
    Multitasking Operating System for 6502 Computers

    Copyright (C) 1989-1998 Andre Fachat 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

****************************************************************************/

#define   PIO       $e810		/* for included keyboard */

#define   VIA1      $e840
#define   vdcctrl   $e888
#define   vdc       $e880
#define   VIDPAGE   4

#define	MAX_SCREEN	4		/* hard limit for tables */

#define	MAX_ASCREEN	maxscr		/* soft limit (dep. on 40/80 cols) */

#define	SET_MMU		ldy #$10:sty MMU+VIDPAGE

#define	BELLIRQ		jsr bellirq

#define	TRIGBELL	jsr trigbell

#define	MAXSPAL		maxspal

#define	MAXZEIL		#25

#define	KEY_START	16	/* when does key repetition start */

#define	SCR_SPACE	" "

				/* screen# -> hi byte of base address in AC */
#define	HI_VID	        asl:asl:bit freq:bpl l1:asl:l1 clc:adc #VIDPAGE<<4

#define	ACT_HI_VID      lda hivid

	.data
&maxspal .byt 0
&maxscr .byt 0
	.text

&console_init .(
	ldx #4
	bit freq
	bpl c1mhz
	ldx #2
c1mhz	stx maxscr

	jsr inimem
	jsr inivid
	jsr inikbd
	jsr inibell
	rts
	.)

inimem    .(
#ifdef ROM
          ldx #$11
l1m       stx maxspal
          stx MMU+1
          
          lda #16
          sta zei2+1
          ldy #0
          sty zei2
          ldx #>BLKSIZ
im1       lda (zei2),y
          pha
          lda #$55
          sta (zei2),y
          cmp (zei2),y
          bne next
          asl
          sta (zei2),y
          cmp (zei2),y
          bne next
          lda #0
          sta (zei2),y
          cmp (zei2),y
          bne next
          pla
          sta (zei2),y
          inc zei2+1
          dex
          bne im1
    
          ldx maxspal      
          jsr ENMEM
          pha
next      pla
          ldx maxspal
          inx
#ifndef ROMTEST
          cpx #$20
#else
          cpx #$18
#endif
          bcc l1m
#endif /* ROM */
          clc
          rts
          .)

&inivid   .(   
          lda curdev
          bne ix

	  lda #$2c		; set charrom and video base
	  sta vdcctrl

	  lda VIA1+VIA_PCR	; set VIA CA2 GRAPHICS pin (PET compatible - switch to hires charrom)
	  and #%11110001
	  ora #%00001100	; low output
	  sta VIA1+VIA_PCR

          ldx #0
i1        bit freq
          bpl onemhz
          lda vdc8tab,x
          jmp nex
onemhz    lda vdc4tab,x
nex       stx vdc
          sta vdc+1
          inx
          cpx #16
          bcc i1
ix
          lda #40
          bit freq
          bpl i2
          lda #80
i2	  sta maxspal
	  rts

vdc8tab   .byt $7e,$50,$64,6,$29,0,$19,$21,0,7,$60,7,0,0,0,0

vdc4tab   .byt $3f,$28,$32,3,$29,0,$19,$21,0,7,$60,7,0,0,0,0

	  .)

&setact   .(
          sta actscr
          asl
          asl
          bit freq
          bpl s1
          asl
s1        and #%00001111
          ldx #12
          stx vdc
          sta vdc+1
	  rts
	  .)

/**************************************************************************
 * Cursor handling
 */

&crsron  .(
          ldx #15
          lda col
          clc
          adc vzei
          stx vdc
          sta vdc+1
          lda vzei+1
          adc #0
          dex
          stx vdc
          and #%00001111
          sta vdc+1
&&crsroff rts
	  .)


#include "devices/kbd_pet.a65"

#include "devices/con_gen_mmap.a65"


