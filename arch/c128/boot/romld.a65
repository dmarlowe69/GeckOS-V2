
#include "chips/vdc.i65"
#include "chips/mmu.i65"

START	=$3000

; where dup_lib is running
; as it is copying from bank 0 to 1, it needs to be in shared RAM
TMP	=$e000	
LIBSIZE	=32	; pages for lib.bin


ZP	=$fb
FA	=$ba	; current device number
ST	=$90	; I/O status

MAPSYS0	=%00111110	; all RAM0 except I/O
MAPSYS1	=%01111110	; all RAM1 except I/O
MAPPET	=%00000000	; std BASIC
CTRL	=MMU

SETBNK	=$ff68		; specific c128
BANK	=0		; BASIC bank definition - RAM - to read filename

OPEN	=$ffc0
SETLFS	=$ffba
SETNAM	=$ffbd
CHKIN	=$ffc6
CHRIN	=$ffcf
CLOSE	=$ffc3		; $ffc3 - calls into BASIC.... 
CLRCH	=$ffcc
BSOUT	=$ffde

        ;-------------------------------------------------
        ; VDC memory map (16k)
        ;
        ; $2000         - 8k character "ROM"
        ; $1800         - 2k attributes (vdc1)
        ; $1000         - 2k character text (vdc1)
        ; $0800         - 2k attributes (vdc0)
        ; $0000         - 2k character text (vdc0)
        ;
        ;-------------------------------------------------
VDCROM	=$2000

	.word start
	*= START

	;----------------------------------------------------
start
	lda #"*"
	jsr BSOUT

	; do we load the 40 or 80 col rom?
	lda MMU+MCR
	bmi load40

	jsr loadrom80	; load init image to bank 0 RAM
	bcs err
	bcc rloaded
load40
	jsr loadrom40
	bcs err
rloaded	
	lda #"*"
	jsr BSOUT

	jsr loadkern	; load kernel image to bank 0 RAM
	bcs err
	lda #"*"
	jsr BSOUT

	jsr loadlib	; load library image to bank 0 RAM
	bcc loaded

err 	rts

loaded
	lda #"*"
	jsr BSOUT

	sei

	lda #%00001010	; video bank 0, shared hi (not low), 8k shared
	sta MMU+RCR

	lda #%00111111	; all RAM bank 0
	sta MMU+PCRC	; config C - work on copy of crom, transfer to VDC
	lda #%01111110	; all RAM bank 1, but I/O
	sta MMU+PCRB	; config B
	lda #%00111110	; all RAM bank 0, but I/O
	sta MMU+PCRA	; config A

	sta MMUFF+PCRA	; enable config A

	jsr reloc_lib	; move lib image from load space to actual location, in both banks

	jsr setup_crom
	jsr crom2vdc

	; https://www.oxyron.de/html/registers_mmu.html

	;.byt 2	; jam

	sta MMUFF+PCRA	; and set env 0 config


	jmp ($fffc)	; RESET


	;----------------------------------------------------

libname	.asc "LIB.BIN"
libnlen	=*-libname

kernname .asc "KERN.BIN"
kernnlen =*-kernname

rom40name .asc "ROM40.BIN"
rom40nlen =*-rom40name

rom80name .asc "ROM80.BIN"
rom80nlen =*-rom80name


loadlib	lda #libnlen
	ldx #<libname
	ldy #>libname
	jmp do_load

loadrom40
	lda #rom40nlen
	ldx #<rom40name
	ldy #>rom40name
	jmp do_load

loadrom80
	lda #rom80nlen
	ldx #<rom80name
	ldy #>rom80name
	jmp do_load

loadkern lda #kernnlen
	ldx #<kernname
	ldy #>kernname
	;jsr do_load

do_load	jsr SETNAM
	lda #1		; LFN
	ldx FA		; current device (from where loader has been loaded)
	ldy #0		; SEC = load
	jsr SETLFS

	lda #BANK
	ldx #BANK	; for filename
	jsr SETBNK

	lda #0
	sta ST

	jsr OPEN	

	lda ST
	beq load

	sec
	rts

	;----------------------------------------------------
	; load and store in extra memory banks

load	.(
	ldx #1		; LFN
	jsr CHKIN

	lda #0
	sta ST

	jsr CHRIN
	sta ZP
	jsr CHRIN
	sta ZP+1

l1	jsr CHRIN
	ldy #0

	php
	sei
	ldx #MAPSYS0
	stx CTRL

	sta (ZP),y

	ldx #MAPPET
	stx CTRL
	plp

	lda ST
	bne endload

incl	inc ZP
	bne checkmmu
	inc ZP+1
checkmmu
	ldx ZP+1
	inx
	bne l1	; high address was not $ff
	lda ZP
	cmp #$05
	bcs l1	; skip first 5 bytes only

	; $ff0x after increase
	jsr CHRIN	; skip a byte
	jmp incl

endload	lda ST
	pha

	jsr CLRCH
	lda #1		; LFN
	jsr CLOSE
	
	pla
	and #$ff-$40
	;cmp #1
	clc
	rts
	.)

	;----------------------------------------------------
        ; copy the lib image into its place
reloc_lib .(
	ldx #0
l	lda r_start,x
	sta TMP,x
	inx
	cpx #r_end-r_start
	bne l
	jmp TMP

r_start
        ldx #LIBSIZE	; number of pages

        ldy #0
loop                    ; copy xr pages of 256 byte from fd/fe upwards
l1      lda $4000,y
l2      sta $0300,y

	sta MMUFF+PCRB	; bank 1
l3	sta $0300,y
	sta MMUFF+PCRA	; back to bank 0

        iny
        bne l1

	inc l1-r_start+TMP+2
	inc l2-r_start+TMP+2
	inc l3-r_start+TMP+2
        dex
        bne loop

	rts
r_end
	.)

	;----------------------------------------------------
	; setup character set

setup_crom .(
	lda #%00001111	; RAM bank 0, $c-$f ROM, -> map chargen at $dxxx
	sta MMU

        lda 0
        ora #7
        sta 0           ; cpu ddr

        ; first copy the charom from $d000, under the i/o

        ldy #0
cl0a    ; first 32 chars - control. no graphs so far
	lda #$ff
        sta $d000,y
	; 2nd 32 chars - special chars and numbers
        lda $d900,y
        sta $d100,y
	; 3rd 32 chars - upper case
        lda $da00,y
        sta $d200,y
        iny
        bne cl0a

	; copy "@" to before the upper case chars
cl1a    lda $d800,y
        sta $d000+64*8,y
        iny
        cpy #8
        bcc cl1a

	; copy lower case "a-z" to 4th set of 32 chars
cl1     lda $d800,y
        sta $d000+(97-1)*8,y
        iny
        cpy #27*8
        bcc cl1

	; copy [Pound]^_ to behind lower case chars
cl2     lda $d800,y
        sta $d000+(91-27)*8,y
        iny
        bne cl2

	sta MMUFF+LCRC

        ; ldy #0
cl3     ; char 92 - replace pound with backslash
	lda c92,y
        sta $d000+92*8,y
	; char 95 - underscore
        lda c95,y
        sta $d000+95*8,y
	; char 96 - tick quote
        lda c96,y
        sta $d000+96*8,y
        iny
        cpy #8
        bcc cl3

	; 5 chars from position 123 to 127
	; curly open, pipe, curly close, tilde, delta
        ldy #0
cl4     lda c123,y
        sta $d000+123*8,y
        iny
        cpy #5*8
        bcc cl4

	; calculate reverse
        ldy #0
cl5     lda $d000,y
        eor #$ff
cl6     sta $d400,y
        iny
        bne cl5
        inc cl5+2
        inc cl6+2
        lda cl6+2
        cmp #$d8
        bcc cl5

        lda 1
        ora #%00000100  ; disable $1xxx char ROM mapping for VIC
        sta 1

	sta MMUFF+PCRA	; and set env 0 config (re-enable I/O)

	rts

        ; character differences to C64 charom
c92     .byt $00, $c0, $60, $30, $18, $0c, $06, $00 
c95     .byt $00, $00, $00, $00, $00, $00, $ff, $00
c96     .byt $06, $0c, $18, $00, $00, $00, $00, $00
c123    .byt $0e, $18, $18, $30, $18, $18, $0e, $00
        .byt $18, $18, $18, $00, $18, $18, $18, $00 
        .byt $38, $0c, $0c, $06, $0c, $0c, $38, $00 
        .byt $00, $00, $00, $73, $ce, $00, $00, $00 
        .byt $00, $18, $3c, $66, $c3, $ff, $00, $00

	.)

crom2vdc .(
	lda #%00111110	; RAM bank 0, $c-$f RAM, IO
	sta MMU

        lda 1
        and #%11111000  ; disable even the charom, only RAM
        sta 1

	; setup charrom read ptr
	lda #<$d000
	sta ZP
	lda #>$d000
	sta ZP+1

        ; set to write (not copy)
        ldx #VDC_VSCRL
        jsr vdcrd
        and #%01111111
        jsr vdcwr

	; setup charrom write ptr in vdc
	ldx #VDC_UPDATE_H
	lda #>VDCROM
	jsr vdcwr
	inx
	lda #<VDCROM
	jsr vdcwr

	lda #0		; 256 chars
	sta FA

cloop	ldy #0
	; copy over rasterlines per char (0-7)
rloop	sta MMUFF+PCRC	; read charrom
	lda (ZP),y
	sta MMUFF+PCRA	; I/O
	ldx #VDC_UPDATA
	jsr vdcwr
	iny
	cpy #8
	bcc rloop
	; rasterlines 8-15 are zero
	lda #0
zloop	jsr vdcwr
	iny
	cpy #16
	bcc zloop
	; advance ZP
	lda #8
	clc
	adc ZP
	sta ZP
	bcc nextc
	inc ZP+1
nextc 	; next char
	inc FA
	bne cloop

        lda 1
        ora #%00000100  ; enable I/O
        sta 1

	sta MMUFF+PCRA	; and set env 0 config (re-enable I/O)
	rts
	.)

vdcwr	.(
	stx VDCI
l	bit VDCI
	bpl l
	sta VDCD
	rts
	.)

vdcrd	.(
	stx VDCI
l	bit VDCI
	bpl l
	lda VDCD
	rts
	.)

	;----------------------------------------------------


