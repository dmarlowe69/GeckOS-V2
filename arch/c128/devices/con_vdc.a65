
/****************************************************************************
   
    OS/A65 Version 2.2
    Multitasking Operating System for 6502 Computers

    Copyright (C) 1989-2024 Andre Fachat 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

****************************************************************************/

#define	CHECK_C128

#define	MAX_SCREEN	3		/* hard maximum number of screens */

#define	MAX_ASCREEN	#3		/* soft maximum number of screens */

#define	SWITCHKEY	61

#define	SET_MMU

#define	BELLIRQ	

#define	TRIGBELL	

#define	MAXSPAL		#40

#define	MAXZEIL		#25

#define	KEY_START	20	/* when does key repetition start */

				/* screen# -> hi byte of base address in AC */
#define	HI_VID	        asl:asl:clc:adc #VIDPAGE

#define	ACT_HI_VID      lda hivid

#define	SCR_SPACE	32

#define	SCR2ASC

#define	ASC2SCR

console_init .(
	jsr inivid
	jsr inicrsr
	jsr inikbd
	rts
	.)

inivid	.(
	; TODO
	rts
	.)

setact	.(
	; TODO
	rts
	.)

/**************************************************************************
 * actual screen handling
 */

setscr	.(
	; TODO
	rts
	.)

inivscr	.(
	; TODO
	rts
	.)

sendline .(
	; TODO
	rts
	.)

printchar .(
	; TODO
	rts
	.)

towcl	.(
	; TODO
	rts
	.)

/**************************************************************************
 * Cursor handling
 */

          .(
        .data
;crsrfl  .byt 0
;crsrcnt .byt 0
        .text

&inicrsr
;	lda #0
;	sta crsrfl
;	sta crsrcnt
	rts

&crsroff .(                    ; disable cursor
;          bit crsrfl
;          bpl ret               ; not enabled
;
;          bit crsrfl
;          bvc clr               ; not inversed
;          ldy spalte
;          lda (vzei),y
;          eor #$80
;          sta (vzei),y
;clr       lda #0
;          sta crsrfl
&ret      rts
	.)

&crsron .(			; enable cursor
;          bit crsrfl
;          bmi irq               ; already enabled
;          lda #0                ; inverse cursor next crsrirq
;          sta crsrcnt
;          lda #128              ; enabled, but not invers
;          sta crsrfl
;
&irq      
;	  dec crsrcnt
;          bpl ret               ; not this time
;          lda #10
;          sta crsrcnt
;
;          ldy spalte
;          lda (vzei),y
;          eor #$80
;          sta (vzei),y
;          lda crsrfl
;          eor #$40
;          sta crsrfl
;
          rts
          .)

	.)

/**************************************************************************/


#include "devices/kbd_c64.a65"

