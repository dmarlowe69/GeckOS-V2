
          .(
        .data
l00c8     .byt 0
        .zero
l00fb     .word 0
l00fd     .word 0
        .text

&parlist  .(
          bcc a1
          beq a1
          cmp #$ab
          bne delerr1
a1        jsr la96b
          jsr la613
          jsr CHRGOT
          beq a2
          cmp #$ab
delerr1   bne delerr
          jsr CHRGET
          jsr la96b
          bne delerr
a2        rts
&delerr   jmp syntax
          .)

&ldump    .(
          bne delerr
          lda VARANF
          ldy VARANF+1
du1       cpy ARRANF+1
          bne du2
          cmp ARRANF
du2       bcs duvend
          sta INT
          sty INT+1
          jsr laad7      ; crlfout
          jsr getstop
          jsr dumpvar
          lda INT
          ldy INT+1
          clc
          adc #7
          bcc du1
          iny
          bne du1

dumpvar   jsr duname
          bcs dustrbin
          lda INT
          adc #2
          ldy INT+1
          bcc du3
          iny
du3       cpx #128
          bcs dufunk
          pha
          lda #" "
          jsr duglout
          pla
          jsr lbba2      ; fliesskommavar holen
du4       jsr lbddd      ; in ASC
          jmp xstrout      ; ausgeben
duvend    jmp duarr
dustrbin  txa
          bpl dustr
          lda #"%"       ; integervar
          jsr duglout
          ldy #2
          lda (INT),y
          tax
          iny
          lda (INT),y
          tay
          txa
          jsr lb395
          jmp du4
dustr     lda #"$"       ; stringvar
          jsr duglout
          jsr duhkout
          ;lda #4
          ;jsr setfla
          ldy #2
          lda (INT),y    ; laenge
          beq dustrr
          sta l00c8
          iny
          lda (INT),y
          sta l0022
          iny
          lda (INT),y
          sta l0022+1
          ldy #0
dust1     lda (l0022),y
          jsr lffd2
          iny
          cpy l00c8
          bne dust1
dustrr
duhkout   lda #34
          jmp lffd2
dufunk    ldy #2         ;funktion
          lda (INT),y
          sta NEWPTR
          iny
          lda (INT),y
          sta NEWPTR+1
          iny
          lda (INT),y
          sec
          sbc #2
          sta l0022
          iny
          lda (INT),y
          sbc #0
          sta l0022+1
          lda #"("
          jsr lffd2
          ldy #0         ; argument
          lda (l0022),y
          jsr lffd2
          iny
          lda (l0022),y
          beq duf1
          jsr lffd2
duf1      lda #")"
          jsr duglout
          jsr dumplist
          rts
duend     jmp laad7
duarr     lda ARRANF     ; arrayvariable
          ldy ARRANF+1
dua1      cpy ARREND+1
          bne dua2
          cmp ARREND
dua2      bcs duend
          sta INT
          sty INT+1
          jsr laad7
          jsr getstop
          jsr duname
          bcc duafk
          txa
          bmi duaint
          lda #"$"
          .byt $2c
duaint    lda #"%"
          .byt $2c
duafk     lda #" "
          jsr lffd2
          lda #"("
          jsr lffd2
          ldy #4
          lda (INT),y
          sta l00fb      ; Anzahl Dimensionen
          clc
          lda #5
          adc INT
          sta l00fd
          lda INT+1
          adc #0
          sta l00fd+1
          jmp dua4
dua3      dec l00fb
          beq duaadd
          lda #","
          jsr lffd2
dua4      lda l00fb
          asl
          tay
          dey
          lda (l00fd),y
          sec
          sbc #1
          pha
          dey
          lda (l00fd),y
          sbc #0
          tay
          pla
          tax
          tya
          jsr adrout
          jmp dua3
duaadd    lda #")"
          jsr lffd2
          ldy #2
          lda (INT),y
          clc
          adc INT
          pha
          iny
          lda (INT),y
          adc INT+1
          tay
          pla
          jmp dua1

duname    ldy #0
          lda (INT),y
          tax
          and #127
          jsr lffd2
          iny
          lda (INT),y
          tay
          and #127
          beq dun1
          jsr lffd2
dun1      tya
          asl
          rts

duglout   jsr lffd2
          lda #"="
          jmp lffd2
          .)

&lfind    .(
          lda BASANF+1
          sta l00fd+1
          lda BASANF
          sta l00fd
          bne d1
          dec l00fd+1
d1        dec l00fd
          ;jsr d10
d2        ldy #0
          lda (l00fd),y
          bne d5
          iny            ; zeilenende
          iny
          lda (l00fd),y  ; hibyte verkettungsadr
          beq fiend      ; prgende
          lda l00fd
          sta NEWPTR
          lda l00fd+1
          sta NEWPTR+1
          lda l00fd      ; 5 fuer anfang text addieren
          clc
          adc #5
          sta l00fd
          bcc d4
          inc l00fd+1
d4        jsr getstop
          jmp d2
fiend     pla
          pla
          jmp ready
d5        cmp (BASZEI),y ; mit erstem Byte des zu suchenden Textes vergleichen
          bne d8
;          lda l00fd
;          sta l00fb
;          lda l00fd+1
;          sta l00fb+1
d6        iny
          lda (BASZEI),y ; cpy l00c8
          beq d9         ; listen
          lda (l00fd),y
          beq d7         ; ende der Zeile dann nicht gefunden
          cmp (BASZEI),y
          beq d6
d7;        lda l00fb
;          sta l00fd
;          lda l00fb+1
;          sta l00fd+1
d8        inc l00fd
          bne d2
          inc l00fd+1
          bne d2

d9        inc NEWPTR
          bne d09
          inc NEWPTR+1
d09       ldy #2
          lda (NEWPTR),y
          tax
          iny
          lda (NEWPTR),y
          jsr listline
          jsr laad7
          ldy #<-1
d13       iny
          lda (l00fd),y
          bne d13
          tya
          clc
          adc l00fd
          sta l00fd
          bcc d14
          inc l00fd+1
d14       jmp d2
/*
d10       ldy #<-1
d11       iny
          lda (BASZEI),y
          bne d11
          sty l00c8
          rts  */
          .)

&ldelete  .(
          jsr parlist
          lda INT:ora INT+1
          bne a3
          ldy #0              ; hier alles bis ende loeschen
          tya
          sta (NEWPTR),y
          iny
          sta (NEWPTR),y
          jmp a9
a3        lda NEWPTR
          ldy NEWPTR+1
          sta l0022
          sty l0022+1
          jsr la613
          bcc a5
          ldy #0
          lda (NEWPTR),y
          pha
          iny
          lda (NEWPTR),y
          sta NEWPTR+1
          pla
          sta NEWPTR
a5        lda l0022+1
          cmp NEWPTR+1
          bcc a5a
          bne a9
          lda l0022
          cmp NEWPTR
          bcs a9
a5a       ldy #0
          ldx #3
a6        lda (NEWPTR),y
          sta (l0022),y
          cmp #0
          bne a7
          dex
          beq a9
          bne a8
a7        ldx #3
a8        iny
          bne a6
          inc l0022+1
          inc NEWPTR+1
          jmp a6
&a9       jsr bindbas
          lda #2
          clc
          adc l0022
          sta VARANF
          lda l0022+1
          adc #0
          sta VARANF+1
          jmp la663

&&lrenew  bne renewerr
          ldy #1
          tya
          sta (BASANF),y
          jsr a9
          jmp ready
          .)

renewerr  jmp syntax
&GETINT   jsr frmnum
          jmp getadr

paraut    .(
          lda #0
          sta l00fb+1
          sta l00fd+1
          lda #10
          sta l00fb
          lda #100
          sta l00fd
          jsr weitzei
          cmp #","
          beq paraut1
          jsr CHRGOT
          jsr GETINT
          sty l00fd
          sta l00fd+1
          jsr weitzei
          cmp #","
          beq paraut1
          jmp syntax
paraut1   jsr CHRGET
          jsr weitzei
          cmp #","
          beq paraut2
          jsr GETINT
          sty l00fb
          sta l00fb+1
paraut2   rts
          .)

          .(
rsyn      lda #11
          .byt $2c
rend      lda #128
          .byt $2c
rillq     lda #14
          .byt $2c
rmemer    lda #16
          sta l00c8
          jsr a9
          ldx l00c8
          jmp la437

&&lrenumber
          jsr paraut
          lda l00fb
          ora l00fb+1
          bne r00
          jmp illquant
r00       ldy #1
          lda (BASANF),y
          beq rend
          jsr a9
          jsr CHRGOT
          beq r0a
          cmp #","
          bne rsyn
          jsr CHRGET
r0a       jsr parlist
          lda INT
          ora INT+1
          bne r01
          ldx #<-1
          ldy #<-1
          bne r02
r01       ldx INT
          ldy INT+1
r02       stx l0022
          sty l0022+1
          jmp r03
riq1      bcs rillq
r1        stx NEWPTR
          sty NEWPTR+1
r03       ldy #1
          lda (NEWPTR),y
          beq r4
          ldy #3
          lda (NEWPTR),y
          cmp l0022+1
          bcc rrr
          bne r4
          dey
          lda (NEWPTR),y
          cmp l0022
          bcc rrr
          bne r4
rrr       lda STRANF
          sec
          sbc #4
          sta STRANF
          tax
          lda STRANF+1
          sbc #0
          sta STRANF+1
          cmp VARANF+1
rmemer1   bcc rmemer
          bne r1a
          cpx VARANF
          bcc rmemer1
r1a       ldy #3              ; alte Zeilennummer speichern
          lda (NEWPTR),y
          sta (STRANF),y
          dey
          lda (NEWPTR),y
          sta (STRANF),y
          dey
          lda l00fd+1         ; und neue dazu
          sta (STRANF),y
          tax
          dey
          lda l00fd
          sta (STRANF),y
          ldy #2
          sta (NEWPTR),y
          iny
          txa
          sta (NEWPTR),y
          lda l00fd           ; neue Zeilennr erhoehen
          clc
          adc l00fb
          sta l00fd
          lda l00fd+1
          adc l00fb+1
          sta l00fd+1
          bcs riq1
          ldy #0              ; naechste Zeile suchen
          lda (NEWPTR),y
          tax
          iny
          lda (NEWPTR),y
          tay
          bne r1
r4        jsr la68e           ; start Zeilennr im Text aendern
r5        ldy #0
          lda (BASZEI),y
          bne r6
          iny
          lda (BASZEI),y
          bne r7
          iny
          lda (BASZEI),y
          bne r7
          jmp rend
r7        lda BASZEI
          clc
          adc #5
          sta BASZEI
          bcc r5
          inc BASZEI+1
          bne r5
r6        cmp #$a7
          beq rthen
r8        cmp #$89       ; goto-Code
          beq rgot
          cmp #$8d       ; gosub-Code
          beq rgot
          cmp #$cb       ; go-Code
          beq rgo
          cmp #34        ; Hochkomma
          beq rhoko
r9        inc BASZEI
          bne r5
          inc BASZEI+1
          bne r5
rhoko     ldy #1         ; Text in Hochkomma ueberspringen
rho1      lda (BASZEI),y
          beq rho3
          cmp #34        ; Ende mit Hochkomma
          beq rho2
          iny
          bne rho1
rho2      iny
rho3      tya
          clc
          adc BASZEI
          sta BASZEI
          bcc r5
          inc BASZEI+1
          bne r5
rthen     jsr CHRGET
          beq r9
          bcs r8
          bcc r10
rgo       jsr CHRGET
          cmp #$a4       ; to-Code
          bne r5
rgot      jsr CHRGET
          bcs r5
r10       lda BASZEI
          sta l00fd
          lda BASZEI+1
          sta l00fd+1
          jsr GETINT
          sec
          lda BASZEI
          sbc l00fd
          sta akku3

          ; neue Zeilennr finden

          lda STRANF
          sta l0035
          lda STRANF+1
          sta l0035+1
r11       ldy #3
          lda (l0035),y
          cmp INT+1
          bne r12
          dey
          lda (l0035),y
          cmp INT
          beq r13
r12       lda #4
          clc
          adc l0035
          sta l0035
          tax
          bcc r12a
          inc l0035+1
r12a      lda l0035+1
          cmp BASEND+1
          bcc r11
          bne r11a
          cpx BASEND
          bcc r11
r11a      lda INT+1
          ldx INT
          jmp r14
r13       dey            ; ZNr in Tabelle gefunden
          lda (l0035),y
          pha
          dey
          lda (l0035),y
          tax
          pla
r14       jsr rfacasc    ; und nach ASC wandeln
          ldy #<-1
r15       iny
          lda l0100,y
          bne r15
          lda l00fd
          sta NEWPTR
          lda l00fd+1
          sta NEWPTR+1
          tya
          sec
          sbc akku3
          sta akku3
          beq r16        ; Zahlen im Text gleich lang
          bcc r17        ; neue < alte -> kleinere Adresse
          lda VARANF
          sta NEWPTR
          clc
          adc akku3
          sta akku3+1
          sta VARANF
          lda VARANF+1
          sta NEWPTR+1
          adc #0
          sta akku3+2
          sta VARANF+1

          cmp STRANF+1
          bcc r18
          beq r18a
r18b      jmp rmemer
r18a      lda VARANF
          cmp STRANF
          bcs r18b
r18       jsr la3bf
          jmp r16

r17       lda BASZEI          ; neue Zahl kleiner als alte
          sta NEWPTR
          clc
          adc akku3
          sta l00fb
          lda BASZEI+1
          sta NEWPTR+1
          sbc #0
          sta l00fb+1
r20       ldy #0
          lda (NEWPTR),y
          sta (l00fb),y
          inc l00fb
          bne r20a
          inc l00fb+1
r20a      inc NEWPTR
          bne r20b
          inc NEWPTR+1
r20b      lda NEWPTR
          cmp VARANF
          bne r20
          lda NEWPTR+1
          cmp VARANF+1
          bne r20
r16       lda l00fd      ; ZNr gleich lang
          sta BASZEI
          lda l00fd+1
          sta BASZEI+1
          ldy #0
r21       lda l0100,y
          beq r22
          sta (BASZEI),y
          iny
          bne r21
r22       tya
          clc
          adc BASZEI
          sta BASZEI
          bcc r23
          inc BASZEI+1
r23       jsr CHRGOT
          cmp #","       ; test auf on x goto/gosub
          bne r24
          jsr CHRGET
          bcs r24
          jmp r10
r24       jmp r5

rfacasc   sta FAC+1
          stx FAC+2
          ldx #$90
          sec
          jsr lbc49
          jmp lbddf
          .)
          .)



