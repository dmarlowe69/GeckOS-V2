/****************************************************************************
   
    OS/A65 Version 2.1
    lib6502 lsh shell program

    Copyright (C) 1997-2020 Andre Fachat 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

****************************************************************************/

#include "lib6502.i65"
#include "kernel.i65"

/* #define	LSH_DEBUG  */

#define	PROMPTCHAR	"#"

#define	BUFLEN 	255

#define	MAXVAR	16

#define	MAXCHLD	8
/*
 * lib6502 programs are started at the address of the 'main' subroutine.
 * The first implementation, however, starts the programs at the start
 * of the text segment - which we now make the address of 'main'...
 */
	.(
	.zero
argp	.word 0

	.bss
quiet	.byt 0		; bit 7 set -> no shell output
waitfl	.byt 0		; bit 7 set -> wait for process termination

piperd	.byt 0		; read from pipe fnr
pipewr	.byt 0		; write to pipe fnr
ispiped	.byt 0		; when bit 7 set, then input is piped from previous

buf	.dsb BUFLEN

	.data
version	.asc 13,10,"sh v0.2 Mar2020 (c) A. Fachat",13,10,0

usage	.asc 13,10, "Usage:"
	.asc 13,10, " lsh [opts] [input file]"
	.asc 13,10, "libshell - command line interface"
	.asc 13,10
	.asc 13,10, "Options:"
	.asc 13,10, " -v    run with debug"
	.asc 13,10, " -d <drive>"
	.asc 13,10, "       run in specified drive"
	.asc 13,10, "A '-' as parameter ends the parameter list."
 	.asc 13,10, "The input file when given is executed instead of stdin."
	.asc 13,10
	.asc 13,10, "Command Line Input:"
	.asc 13,10, "Use '<','>' and '!' to redirect input, output or stderr"
	.asc 13,10, "Use '>>' to append output to a file"
	.asc 13,10, "Use '<< PATTERN' to pipe input to command until line with just 'PATTERN'"
	.asc 13,10, "Pipe commands using '"
	.asc 13,10
	.asc 13,10, "Example:"
	.asc 13,10, " lsh -v -d c:"
	.asc 13,10, " cat test.bat ' wc"
	.asc 13,10, 0
	.text

&main 	.(
	sta argp
	sty argp+1

	jsr instsig
	; install signal handler

	jsr source_init

	ldx #0
	stx quiet

	lda argp
	ldy argp+1

	jsr getopts	/* needs argp in a/y */
	bcc nooptserr

	lda #<usage
	ldy #>usage
	jsr strout

	jmp terminate

nooptserr
	; check for command file parameter
	; (needs yr from getopts)
	jsr argfile
	
	lda debug
	beq nodbg
	lda #<version
	ldy #>version
	jsr txtout
nodbg
	lda #0
	sta ispiped	; init getcmd

	jsr bgclr

	/* command loop */
loop

	jsr checksig

	jsr getcmd
	sta argp
	sty argp+1
	bcs errclr

	; do commands
#ifdef LSH_DEBUG
	lda #<runtxt
	ldy #>runtxt
	jsr txtout

	ldy #0
x1	lda (argp),y
	beq next
	jsr putc
	iny
	bne x1
next	lda #" "
	jsr putc
	iny
	lda (argp),y
	bne x1

	lda #13
	jsr putc
	lda #10
	jsr putc
#endif
	jsr execfork
	stx argp	; PID as returned from Forkto
	sty argp+1
	php
	jsr clear
	plp
	bcs loop	; no task forked, x/y invalid


	ldx argp
	ldy argp+1
	jsr savecmd

	bit waitfl
	bpl loop	; no wait
#ifdef LOCKSEM
	; make sure other programs can run while we wait for completion
	ldx #SEM_SENDBUF
	clc
	JSR LOCKSEM
#endif
	jsr dobg

	ldx argp
	ldy argp+1
	jsr waitpid
	jmp loop

errclr	pha
	jsr lcrlfout
	pla
	cmp #E_EOF
	bne noteof
	jsr source_pull	; check if we are "source'ing" a file, and restore old STDIN
	bcc loop
	bcs terminate
noteof
	cmp #E_OK
	bne terminate
	lda #0
	sta ispiped
	jsr clear
	jmp loop

clear	.(
	ldx buf+0
	jsr fclose
	ldx buf+1
	jsr fclose
	ldx buf+2
	jsr fclose
#ifdef LSH_DEBUG
	lda #13
	jsr putc
	lda #10
	jsr putc
#endif
	rts
	; jmp loop
	.)

terminate
	jsr source_term
	rts
	.)

lcrlfout	
	lda #13
	jsr putc
	lda #10
putc	.(
	bit quiet
	bmi end
	ldx #STDOUT
	sec
	jmp fputc
end	rts
	.)

;----------------------------------------------
/*
 * read and execute a command 
 */
getcmd	.(
	.bss
tx	.byt 0
ty	.byt 0		; index in ap (cmdline arguments)
ta	.byt 0
didrd	.byt 0		; we did read, so successful parse gives crlf
	.zero
&ap	.word 0
	.text

	ldx #<-1
	stx waitfl
	inx
	stx didrd

	bit ispiped
	bmi contpipe	; ok, piped
	bvs dostdin	; last command ended with ";"

#ifdef LOCKSEM
	; make sure other programs can run while we wait for user input
	ldx #SEM_SENDBUF
	clc
	JSR LOCKSEM
#endif

	jsr dobg

	ldx #STDIN
	jsr readline
	bcc docmd

	pha
	cmp #E_EOF
	beq cmdend
	ldx #3
	jsr errout
cmdend	pla
	.byt $2c
perr
werr	lda #E_OK
;	.byt $2c
;perr	lda #E_FNOFIL
	sec
	rts

docmd	; pass a/y	; warning, argp is used outside loop
	jsr tokenize
	sta ap
	sty ap+1

	dec didrd	; mark for crlf at exit

#ifdef LSH_DEBUG
	lda #10
	jsr putc
	ldy #0
d0	lda (ap),y
	beq next
	jsr putc
	iny
	bne d0
next	jsr lcrlfout
	iny
	lda (ap),y
	bne d0
#endif

	/* 
	 * now we have to parse the command line for I/O redirection and
	 * piping, starting the right programs along the way.
	 */

	/* prepare stdio for started task */

	lda #0
	sta ty
dostdin			; dup stdin to be used in fork
	ldx #STDIN
	jsr dup
	stx buf+0	; stdin
	jmp nopipe

contpipe		; continue command with input piped from previous
			; BUG - when only "|" then no files are opened 
	lda piperd
	sta buf+0	; stdin
nopipe
#ifdef LOCKSEM
	; make sure we lock sendbuf (used in forkto) for us, so
	; other programs don't reserve it and lock up the system
	ldx #SEM_SENDBUF
	sec
	JSR LOCKSEM
#endif
	ldx #STDOUT	; dup stdout to be used in fork
	jsr dup
	stx buf+1	; stdout
	ldx #STDERR	; dup stderr to be used in fork
	jsr dup
	stx buf+2	; stderr

	lda ispiped
	beq nopipew
			; move args ptr to part behind pipe symbol
	lda #0
	sta ispiped
	ldy ty
	lda (ap),y
	bne nopipew
	iny
	lda (ap),y
	beq perr
	sty ty
nopipew
	/* parse command line, from (ap) to buf+3 */
	/* TODO: interpret "\" escape codes, shell variables */

	/* copy the filename */
	ldy ty
	ldx #3
f0	lda (ap),y
	sta buf,x
	jsr checkesc
	inx
	iny
	cmp #0
	bne f0
pars			; y points to behind token end marker zero
	lda (ap),y
	sta buf,x
	beq ende	; end of token list
	cmp #">"
	beq out1	; output redir
	cmp #"<"	
	beq in1		; input redir
	cmp #"!"
	beq err1	; error redir
	cmp #"'"
	beq redir_pipe	; pipe to next command
	cmp #"&"	
	beq back1	; run in background
	cmp #";"
	beq wait1	; end pipe (wait for completion)
f1
	lda (ap),y
	sta buf,x
	jsr checkesc
	inx
	iny
	cmp #0
	bne f1
	jmp pars

in1	jmp redir_in

out1	jmp redir_out

err1	jmp redir_err

ende	bit didrd
	bpl nord
	jsr lcrlfout
nord
	lda #<buf
	ldy #>buf
	clc
	rts

back1	.(
	lda #0
	sta waitfl
	sta ispiped
	sta buf,x
	sta buf+1,x
	jmp ende
	.)

wait1	.(
	iny
	sty ty
	stx tx
	lda #$40
	sta ispiped	; last command ended with ";"
	asl
	sta waitfl
	lda #0
	jmp pipe3
	.)

redir_pipe .(
	iny
	sty ty		; save ptr in args
	stx tx		; save ptr in target buf

	jsr pipe	; create a pipe
	bcs pipend
	stx piperd	; fnr for reading
	sty pipewr	; fnr for writing

	ldx buf+1	; close previous stdout
	jsr fclose
	ldx pipewr	; replace with pipe
	stx buf+1

	lda #$80
	sta ispiped	; set flag for piping
	lda #0
	sta waitfl	; background starting
&pipe3
	;lda #0
	ldx tx
	sta buf,x
	sta buf+1,x
	jmp ende

pipend
	lda #"?"
	jsr putc

	lda #E_OK	; only close streams
	sec
	rts
	.)


redir_err .(
	stx tx
	lda #1
	sta ta		; ta bit 0 = error out
	iny
	lda (ap),y
	cmp #">"
	bne nocombine
	lda #3		; ta bit 1 = std out
	sta ta
	iny
	lda (ap),y
	cmp #">"
	bne nocombine
	lda #7		; ta bit 2 = no create but append
	sta ta
	iny
&nocombine
	lda (ap),y
	bne inok
	iny
	lda (ap),y
	bne inok
	jmp openend
inok 	sty ty
	tya
	clc
	adc ap
	pha
	lda #0
	adc ap+1
	tay
	lda ta
	and #4
	beq noap
	ldx #OPEN_AP
	.byt $2c
noap
	ldx #OPEN_WR
	pla
	jsr fopen
	bcs openend
	txa
	pha
	lsr ta
	bcc noerr	; no stderr
	jsr dup		; dups xr fileno
	bcs noerr
	txa
	pha
	ldx buf+2	; stderr
	jsr fclose
	pla
	sta buf+2	; stderr
noerr
	lsr ta
	bcc nostd
	ldx buf+1	; stdout
	jsr fclose
	pla
	sta buf+1	; stdout
	jmp in0
nostd	pla
	tax
	jsr fclose
in0
	ldx tx
	ldy ty
in2	lda (ap),y
	iny
	cmp #0
	bne in2
	jmp pars
openend	
	lda #"?"
	jsr putc

	lda #E_OK
	sec
	rts
	.)

redir_out .(
	stx tx
	lda #2
	sta ta		; std out
	iny
	lda (ap),y
	cmp #">"
	bne noappend
	lda #6
	sta ta
	iny
noappend
	lda (ap),y
	cmp #"!"
	bne nocomb1
	inc ta		; 3 or 7
	iny
nocomb1	jmp nocombine
	.)

redir_inpipe .(
	iny
	lda (ap),y
	bne inok
	iny 
	lda (ap),y
	bne inok
	lda #"?"
	jsr putc
	lda #E_OK
	sec
	rts
inok	sty ty
	tya
	clc
	adc ap
	pha
	lda ap+1
	adc #0
	pha

	ldx buf+0
	jsr fclose
	jsr pipe
	stx buf+0
	pla
	tax
	pla
	; y is stream to write, a/x is the par address
	jsr bic_inpipe	
	jmp inend		; end of redir in redir_in below
	.)

redir_in .(
	stx tx
	iny
	lda (ap),y
	beq notlinked
	cmp #"<"	; input pipe
	beq redir_inpipe
	bne inok
notlinked
	iny
	lda (ap),y
	beq openend
inok 	sty ty
	tya
	clc
	adc ap
	pha
	lda #0
	adc ap+1
	tay
	pla
	ldx #OPEN_RD
	jsr fopen
	bcs openend
	txa
	pha
	ldx buf+0;	stdin
	jsr fclose
	pla
	sta buf+0;	stdin
&inend	ldx tx
	ldy ty
in2	lda (ap),y
	iny
	cmp #0
	bne in2
	jmp pars
openend	
	lda #"?"
	jsr putc

	lda #E_OK
	sec
	rts
	.)

#ifdef LSH_DEBUG
	.data
&runtxt	.byt 13,10,"run: ",0
	.text
#endif
	.)

;----------------------------------------------
/* 
 * readline reads a line from stdin and puts it into buf. It returns a
 * pointer to the command line in a/y.
 * Later command line history / command line editing will go here
 * For now we ignore codes > 127, and most control codes <32
 */
readline .(
	.bss
instr	.byt 0
prev 	.byt 0
	.data
promptxt .byt PROMPTCHAR,0
	.text

	stx instr

	lda #<promptxt
	ldy #>promptxt
	jsr txtout

	ldy #0
	sty prev
l0
	ldx instr
	sec
	jsr fgetc
	bcs end
	cmp #10
	bne nolf
	ldx prev
	cpx #13
	bne endline
nolf	sta prev
	cmp #13
	beq endline
	cmp #8
	beq backspace

	cmp #128
	bcs l0
	cmp #32
	bcc l0

	jsr putc
	sta buf,y
	iny
	cpy #BUFLEN
	bcc l0
	/* cmdline too long */
	rts

backspace
	cpy #0
	beq l0
	dey
	jsr putc
	jmp l0

endline	lda #0
	sta buf,y

	lda #<buf
	ldy #>buf
	clc
end
	rts
	.)

;----------------------------------------------
/*
 * Print the error string of the number given in xr
 */
#define	NUMERR	6

errout	.(
	cpx #NUMERR
	bcc e1
	ldx #0
e1
	lda errh,x
	tay
	lda errl,x
	jsr etxtout

	lda #<errortxt
	ldy #>errortxt
	jmp etxtout

	.data
errh	.byt >t0, >t1, >t2, >t3, >t4, >t5
errl	.byt <t0, <t1, <t2, <t3, <t4, <t5

t0	.asc "Unknown",0
t1	.asc " : Command line syntax",0
t2	.asc " : Unknown option",0
t3	.asc "Input I/O",0
t4	.asc " : File",0
t5	.asc "Received sigchld:",0

errortxt .asc " error",10,13,0
	.text
	.)

;----------------------------------------------
/* 
 * print a null-terminated string (up to 254 char), addr in a/y, fileno in xr
 */
txtout	.(
	.zero
tp	.word 0
	.text

	bit quiet
	bpl doit
	rts
&xtxtout
	ldx buf+1
	.byt $2c
doit	ldx #STDOUT
	.byt $2c
&etxtout
	ldx #STDERR
	sta tp
	sty tp+1
	ldy #0
t1	lda (tp),y
	beq te
	sec
	jsr fputc
	iny
	bne t1
	inc tp+1
	bne t1
te	rts
	.)

ehexout	.(
	pha
	lsr
	lsr
	lsr
	lsr
	jsr nibout
	pla
nibout	and #$0f
	clc
	adc #"0"
	cmp #"9"+1
	bcc ok
	adc #"a"-"9"-2
&estdout
ok	ldx #STDERR
	sec
	jmp fputc
	.)

;----------------------------------------------
/*
 * This interprets the command line options for the shell.
 * Currently only the debug print "-v" and "-d <drive>" to
 * start in a different drive is supported. 
 * A "--" ends the options list
 * 
 */

	.data
optslst	.asc "vd",0
optsflg	
debug	.byt 0
	.byt 0	; unused for option d
optsadl	.byt 0, <optdrv-1
optsadh	.byt 0, >optdrv-1

	.text

optdrv	tya
	pha
	clc
	adc argp
	pha
	lda #0
	adc argp+1
	tay
	pla
	jsr chdir
	pla
	tay
nextpar	iny
	lda (argp),y
	bne nextpar
	rts

;----------------------------------------------
; source handling; stddup source'd files into STDIN,
; restoring the original on EOF
;
; source_init 	- init source stack
; source_push	- open new file and stddup as STDIN
; source_pull	- close current file, restore prev STDIN
; source_term	- cleanup

#define	MAX_SOURCE_DEPTH	4
	.(
	.bss
s_stack	.dsb MAX_SOURCE_DEPTH
s_sp	.byt 0
	.text

&source_init
	lda #0
	sta s_sp
	rts

&source_term .(
	ldx s_sp
	beq done
	dex
	lda s_stack,x
	tax
	jsr fclose	; close old STDIN
	dec s_sp
	bne source_term
done 	rts
	.)

&source_pull .(
	sec
	ldx s_sp
	beq done
	dec s_sp
	dex
	lda s_stack,x
	tay
	ldx #STDIN
	jsr stddup
	bcs duperr
	jsr fclose	; close old STDIN
done 	rts
duperr	ldx s_sp
	lda s_stack,x
	tax
	jsr fclose
	rts
	.)
	
	; a/y is address of filename
&source_push .(
	ldx s_sp
	cpx #MAX_SOURCE_DEPTH
	bcc ok
	lda #E_NOMEM
ferror	rts

ok 	ldx #OPEN_RD
	jsr fopen
	bcs ferror
	txa
	pha
	tay
	ldx #STDIN
	jsr stddup
	bcs duperr
	pla		; cleanup
	txa
	ldx s_sp
	sta s_stack,x
	inc s_sp
	clc
	rts

duperr	jsr s_duperr
	sec
	rts	
	.)

	.)

;----------------------------------------------
; open a file and use for stdin
; used when a file is given as parameter on start
;

argfile	.(
	lda (argp),y
	bne dofile
	clc
	rts

dofile	tya
	clc
	adc argp
	pha
	lda #0
	adc argp+1
	tay
	pla
	ldx #OPEN_RD
	jsr fopen
	bcs ferror
	txa
	pha
	tay
	ldx #STDIN
	jsr stddup
	bcs duperr
	jsr fclose
	pla
	lda #<-1
	sta quiet
	clc
	rts
duperr	pla
&s_duperr
	tax
	jsr fclose
	lda #5
	.byt $2c
ferror  lda #4
;       .byt $2c
;error  lda #1
;       .byt $2c
;unknown lda #2
        pha
        lda argp
        ldy argp+1
        jsr etxtout
        pla
        tax
        jmp errout

	.)

;----------------------------------------------
/*
 * tokenize takes the one-string command line and generates 
 * the tokenized command line. The prompt is removed, too.
 */
tokenize .(
	.bss
tbuf	.dsb BUFLEN
hk	.byt 0
	.text

	sta argp
	sty argp+1

	ldx #0
	ldy #<-1
kx	iny
	lda (argp),y
	beq ende
	cmp #" "
	beq kx
	cmp #PROMPTCHAR	; is prompt?
	beq kx		; yes, ignore

	.byt $24	; ldy #<-1
k0	iny
	lda (argp),y
	beq ende
	cmp #" "
	beq k0		; ignore space

	cmp #34
	beq starthk	; we escape with "
	lda #" "
	.byt $24
starthk	iny
	sta hk
			; loop over cmd
k1	lda (argp),y
	sta tbuf,x	; store in buffer
	beq ende
	cmp hk		; are we done?
	beq next	; yes
	inx
	iny
	bne k1

next	lda #0		; separate tokens with zero
	sta tbuf,x
	inx
	jmp k0
			; parsed until end of line
ende	lda #0
	sta tbuf,x	; end of token
	sta tbuf+1,x	; end of token list
	lda #<tbuf
	ldy #>tbuf
	rts
	.)

;----------------------------------------------
/*
 * we get the three streams in buf+0,+1 and +2 and the command line in
 * buf+3. We now check for builtin commands, and if not found, 
 * fork a process.
 */
;lstdin	=buf
;lstdout	=buf+1
;lstderr	=buf+2
cmdline	=buf+3

execfork .(
	.zero
&cp	.word 0
	.bss
&cnt	.byt 0
	.text

	/* search builtin table */
	lda #<bictbl
	sta cp
	lda #>bictbl
	sta cp+1

	lda cmdline
	beq sret	; E_OK == 0

	ldy #0
	sty cnt
e1	ldx #0
e0	lda (cp),y
	beq found
	cmp cmdline,x
	bne nextw
	inx
	iny
	bne e0
nextw	iny
	lda (cp),y
	bne nextw
nextw2	inc cnt
	iny
	lda (cp),y
	bne e1

	; no internal command
	lda #<buf
	ldy #>buf
	jsr forkto
	bcc ok
	pha
	jsr hexout
	jsr spout
	pla
	pha
	jsr strerror
	jsr strout
	jsr crlfout
	pla
sret	sec
ok	rts 

found	
	cmp cmdline,x	; cmdline token must be at end too
	bne nextw2

	;lda #E_ILLPAR
	;bit waitfl
	;bpl sret		; internal commands cannot go background

	lda cnt
	asl
	tay
	lda bicaddr+1,y
	sta cp+1
	lda bicaddr,y
	sta cp
	lda #<buf+3
	ldy #>buf+3
	jsr doit
	sec	; means to close the stdio streams; ac gives return code
	rts
&doit	jmp (cp)
	.)

dobg 	.(
	; pull stuff from background buffer and execute background code
	jsr bgpull
	bcc next
	rts
next	asl
	tay
	lda bgcaddr+1,y
	; beq illegal, should not happen
	sta cp+1
	lda bgcaddr,y
	sta cp
	jsr doit
	jmp dobg
	.)

	; data tables for built-in command execution
	; note - bgc_inpipe patched into place for bic_exit, as bic_exit is immediate
#define	INPIPE_CNT	1
	.data
	; immediate execution
bicaddr .word bic_echo,   bic_exit, bic_cd, bic_pwd, bic_set, bic_uname, bic_reset
	.word bic_dup, bic_help, bic_source, bic_lsenv, bic_jobs
	; background execution after parsing
bgcaddr .word bgc_echo, bgc_inpipe,      0,       0,       0, bgc_uname,         0
	.word       0, bgc_help,          0, bgc_lsenv, bgc_jobs
	; command names for parsing
bictbl	.asc "echo",0, "exit",0, "cd",0, "pwd",0, "set",0, "uname",0, "reset",0
	.asc "dup",0, "help",0, "source", 0, "lsenv", 0, "jobs", 0
	.byt 0
	.text

xcrlfout .(
	ldx buf+1	; stdout
	.byt $2c
&ecrlfout
	ldx #STDERR
	lda #13
	sec
	jsr fputc
	lda #10
	sec
	jmp fputc
	.)

	; print the usage text
bgc_help .(
	jsr bgpull
	sta buf+1
	lda #<usage
	ldy #>usage
	jsr xtxtout
	jmp bgc_end
	.)

	; print the set of environment variables
bgc_lsenv .(
	jsr bgpull
	sta buf+1

	jsr getenvp
	sta cp
	sty cp+1

	ldx buf+1

	ldy #0
lse1	lda (cp),y
	beq next
	jsr fputc
	iny
	bne lse1
	beq lsend
next	iny
	beq lsend
	lda (cp),y
	beq lsend
	jsr xcrlfout
	jmp lse1
lsend
	jsr xcrlfout
	ldx buf+1
	jsr fclose
	lda #E_OK
	rts

	.)

	; set the shell's stdx streams to the redirected streams from the dup command
bic_dup	.(
	; stdin
	ldx #STDIN
	ldy buf+0
	jsr stddup
	bcs duperr
	stx buf+0
	; stdout
	ldx #STDOUT
	ldy buf+1
	jsr stddup
	bcs duperr
	stx buf+1
	; stderr
	ldx #STDERR
	ldy buf+2
	jsr stddup
	bcs duperr
	stx buf+2
	lda #E_OK
duperr	rts
	.)

	; print out uname system information
bgc_uname .(
	jsr bgpull
	sta buf+1
	jsr xcrlfout
	jsr getos
	jsr xtxtout
	jsr xcrlfout
	jmp bgc_end
	.)

	; set environment value
bic_set	.(
	inx
	txa
	clc
	adc #<buf+3
	pha
	lda #0
	adc #>buf+3
	tay
	pla
	jmp putenv
	rts
	.)

	; exit the shell
bic_exit .(
	jmp term
	.)

	; reset the machine
bic_reset .(
	jmp ($fffc)
	.)

	; input redirection from STDIN
	; y is stream to write, a/x is the par address
bic_inpipe
	sta cp
	stx cp+1
	tya
	pha
#if 0
	lda cp
	ldy cp+1
	jsr txtout
#endif
	jsr bgpushpar
	pla
	jsr bgpush
	lda #INPIPE_CNT
	jmp bgpush
	
	; echo some output
bic_echo .(
	inx
	txa
	clc
	adc #<buf+3
	pha
	lda #0
	adc #>buf+3
	tay
	pla
&bic_pushpar
	sta cp
	sty cp+1

	jsr bgpushpar
&bic_lsenv
&bic_help
&bic_uname
&bic_jobs
	ldx buf+1 
	jsr dup
	bcs err
	txa
	jsr bgpush
	lda cnt
	jmp bgpush
	.)
	; second half of command
bgc_echo .(
	jsr bgpull
	sta buf+1	; stdout
	jsr bgpullpar
	sta cp
	sty cp+1

	jsr xcrlfout
	ldx buf+1	; stdout

	ldy #0
l0	lda (cp),y
	beq n1
	sec
	jsr fputc
	iny
	bne l0
n1	iny
	lda (cp),y
	beq bgc_echo_end
	lda #" "
	sec
	jsr fputc
	jmp l0
bgc_echo_end
	jsr xcrlfout
&bgc_free_end
	lda cp
	ldy cp+1
	jsr mfree
&bgc_end
	ldx buf+1	; stdout
	jmp fclose
&err	rts
	.)

	; second half of command
bgc_inpipe .(
	.data
ip_prompt	
	.asc "> ",0
	.text
	jsr bgpull
	sta buf+1	; stdout
	jsr bgpullpar
	sta cp
	sty cp+1

	; now read data from (real) STDIN of the shell
	; and pipe to the output stream given, until we
	; encounter a string that is the first parameter
	; in cp; end with bgc_free_end

	jsr lcrlfout
	lda #<ip_prompt
	ldy #>ip_prompt
	jsr txtout

loop0	ldy #0
loop	jsr pipeinchar
	bcs endofread
	cmp (cp),y
	beq match
	bne outloop2

contcr  tya
	pha
	lda #10
	jsr putc
	lda #<ip_prompt
	ldy #>ip_prompt
	jsr txtout
	pla
	tay
	lda #13
cont	ldx buf+1
	sec
	jsr fputc
	bcc loop
endofread
	lda #"?"
	ldx #STDERR
	sec
	jsr fputc
	jmp bgc_free_end
match
	iny
	lda (cp),y
	beq found
	jsr pipeinchar
	cmp (cp),y
	beq match
	; no match
	sty cnt
	pha
	ldy #0
outloop
	lda (cp),y
	ldx buf+1
	sec
	jsr fputc
	iny
	dec cnt
	bne outloop
	pla
outloop2		; loop until cr/lf
	ldy #0
outloop3
	cmp #10
	beq cont
	cmp #13
	beq contcr

	ldx buf+1
	sec
	jsr fputc
	jsr pipeinchar
	bcc outloop3
	bcs endofread
found
	jmp bgc_free_end

pipeinchar
	ldx #STDIN
	sec
	jsr fgetc
	php
	pha
	jsr putc	; terminal out
	pla
	plp
	rts
	.)

bic_cd	.(
	inx
	txa
	clc
	adc #<buf+3
	pha
	lda #0
	adc #>buf+3
	tay
	pla
	jmp chdir
	.)

bic_source .(
	inx
	txa
	clc
	adc #<buf+3
	pha
	lda #0
	adc #>buf+3
	tay
	pla
	jmp source_push
	.)

bic_pwd	.(
	jsr lcrlfout
	lda #<buf+3
	ldy #>buf+3
	ldx #BUFLEN-3
	jsr cwd
	bcs ende
	lda #<buf+3
	ldy #>buf+3
	jsr xtxtout
	lda #0
ende	rts
	.)

;----------------------------------------------
; background command buffer handling
;
; When piping together commands, internal and external commands can be mixed.
; For example you can do 'help | more' to pipe the help output through the
; more command. When immediately executing the command at plumbing time (when
; commands are wired together using pipes), the command blocks, as the output
; stream is not flushed, as more is not started yet, and the buffer runs full.
; Therefore we only buffer a command here while plumbing, until it is time
; for the shell to wait for the end of a command (e.g. on ';', or end of line)
; At that point in time we execute the commands in this buffer.
;
	.(
	; max value is 128, anything above detects overflow immediately
#define	BGBUF_LEN	20
	.bss
bgbuf	.dsb BGBUF_LEN
bglen	.byt 0
	.zero
bgp	.word 0
	.text

&bgclr	.(
	lda #BGBUF_LEN
	sta  bglen
	rts
	.)

&bgpush	.(
	ldx bglen
	dex
	bmi errs
	sta bgbuf,x
	stx bglen
	clc
	rts
errs	sec
	rts
	.)

; set carry on empty
&bgpull	.(
	ldx bglen
	cpx #BGBUF_LEN
	bcs errx
	lda bgbuf,x
	inx
	stx bglen
&errx	rts
	.)

	; find the length of a parameter (address in cp)
	; malloc a buffer, copy it there and push address
 	; of malloc'd buffer
&bgpushpar .(
	ldy #0
f0	lda (cp),y
	beq gotlen
	iny
	bne f0
gotlen	iny		; check second terminating zero-byte
	lda (cp),y
	bne f0
	iny		; include terminating zero
	tya
	ldy #0
	jsr malloc
	bcs errx
	sta bgp
	sty bgp+1

	ldy #<-1
copy	iny
	lda (cp),y
	sta (bgp),y
	bne copy
	iny
	lda (cp),y
	sta (bgp),y
	bne copy

	lda bgp
	jsr bgpush
	lda bgp+1
	jmp bgpush
	.)

	; returns address in a/y
&bgpullpar .(
	jsr bgpull
	tay
	jmp bgpull
	.)

	.)

;----------------------------------------------
; signal handling
;
; instsig	- install signal handler
; sigrchld	- handle (store) child signal
; checksig	- check for received signals
; waitpid	- wait for the termination of given pid
;

	.(
	.data
	; these are explicitely data segment to ensure proper init with zero
	; flag if we have received a SIG_CONT
gotcont	.byt 0
	; number of children we received signal from
cnum	.byt 0

	.bss
	; PID we are waiting for
wpid	.word 0
	; list of lo/hi PID for received signals, and corresponding return value
ctabl	.dsb MAXCHLD
ctabh	.dsb MAXCHLD
ctabr	.dsb MAXCHLD
	.text

sigrbrk	.(
	; TODO real handler
	; currently ignored
	rts
	.)

sigrcont .(
	lda #1
	sta gotcont
	rts
	.)

sigrchld .(
	php
	sei
	pha
	tya
	ldy cnum
	sta ctabh,y
	txa
	sta ctabl,y
	pla
	sta ctabr,y
	cpy #MAXCHLD-1
	bcs noinc
	inc cnum
noinc	plp
	rts
	.)

&instsig .(
	lda #0
	sta cnum
	lda #<sigrchld
	ldy #>sigrchld
	ldx #SIG_CHLD	; child has died
	jsr signal
	lda #<sigrcont
	ldy #>sigrcont
	ldx #SIG_CONT	; fg child has suspended
	jsr signal
	lda #<sigrbrk
	ldy #>sigrbrk
	ldx #SIG_BRK	; we have received Ctrl-C
	jmp signal
	.)

&checksig .(
	lda cnum
	bne found
	rts

found	ldx #5
	jsr errout
	lda ctabh
	jsr ehexout
	lda ctabl
	jsr ehexout
	lda #","
	ldx #STDERR
	sec
	jsr fputc
	lda ctabr
	jsr ehexout
	lda #" "
	jsr estdout
	lda ctabr
	jsr strerror
	jsr etxtout
	jsr ecrlfout
	jsr decnum
	jmp checksig
	.)

decnum	.(
	sei
	ldy #0
f1	lda ctabl+1,y
	sta ctabl,y
	lda ctabh+1,y
	sta ctabh,y
	lda ctabr+1,y
	sta ctabr,y
	iny
	cpy cnum
	bcc f1
	dec cnum
	cli
	rts
	.)

&waitpid .(
	stx wpid
	sty wpid+1

loop	lda cnum
	bne gotone
	lda gotcont
	bne exit
	jsr yield
	jmp loop

gotone	lda wpid
	cmp ctabl
	bne notthis
	lda wpid+1
	cmp ctabh
	beq found
notthis	jsr decnum
	jmp loop
found	jmp decnum

exit	lda #0
	sta gotcont
	rts
	.)

	.)	; signal handling
;----------------------------------------------

	; TODO process '\' escape codes
checkesc .(	; command line escape handling
	.bss
i1	.byt 0
i2	.byt 0
br	.byt 0
vbuf	.dsb MAXVAR
	.zero
p2	.word 0
	.text

	cmp #"$"
	beq varsub
	rts

varsub	.(		; first filter variable name from command line
	; dex
	stx i1
	lda #0
	sta br

	ldx #0
	iny
	sty i2

	ldx #0
	; iny
	lda (ap),y
	cmp #"{"
	beq br1
	cmp #"("
	bne nobr
	lda #")
	.byt $2c
br1	lda #"}"
	sta br
	iny
nobr
	lda (ap),y
	sta vbuf,x
	beq endname
	cmp br
	beq endn2
	cmp #"a"
	bcc noasc1
	cmp #"z"+1
	bcc nextc
noasc1	cmp #"A"
	bcc endname
	cmp #"Z"+1
	bcc nextc
	cmp #"_"
	beq nextc
	cmp #"0"
	bcc endname
	cmp #"9"+1
	bcs endname
nextc
	inx
	iny
	jmp nobr

endn2   iny
endname	lda #0
	sta vbuf,x
	dey
	sty i2

#ifdef ENVTEST
lda #<fvar:ldy #>fvar:jsr txtout:lda #<vbuf:ldy #>vbuf:jsr txtout
lda #<cvar:ldy #>cvar:jsr txtout
#endif

	; now substitute variable in vbuf -> a/y pointer to new value

	lda #<vbuf
	ldy #>vbuf
	jsr getenv
	sta p2
	sty p2+1
	ora p2+1
	beq notfound

#ifdef ENVTEST
lda #<evar:ldy #>evar:jsr txtout:lda p2:ldy p2+1:jsr txtout
lda #<cvar:ldy #>cvar:jsr txtout
#endif
	ldy #0
	ldx i1
lo	lda (p2),y
	sta buf,x
	beq loe
	iny
	inx
	bne lo
loe	dex
	stx i1

notfound
	ldx i1
	ldy i2
	lda (ap),y
	rts

#ifdef ENVTEST
	.data
fvar	.asc 13,10, "found var :",0
cvar	.asc 13,10,0
evar	.asc 13,10, "got var :",0
	.text
#endif
	.)

	.)	; command line escape handling

	; -----------------------------------------------
	; job handling
	;
	; This code stores command lines for background jobs
	; so they can be displayed with the "jobs" command
	; and also fore-grounded when needed.
	.(

	; length of command line buffer
CBUFLEN	=128

	; savecmd takes the command line from buf+3
	; and PID from x/y (as returned from execfork),
	; and saves it in a buffer.
&savecmd .(
	txa
	ldx numpids
	cpx #MAXCHLD
	bcc :+
	rts
:	sta pidl,x
	tya
	sta pidh,x
	inc numpids

	.assert CBUFLEN == 128, "buffer length mismatch with algo"
	lda buflen
	sta index,x
	tax
	bmi ovfl
	ldy #0
cpcmd	lda buf+3,y
	bne store
	lda #" "
	sta cmdbuf,x
	iny
	inx
	bmi ovfl
	lda buf+3,y
	beq end
store	sta cmdbuf,x
	iny
	inx
	bpl cpcmd
ovfl	dex
	lda #0
end	sta cmdbuf,x
	inx
	bpl eok
	dex
eok	stx buflen
	clc
	rts
	.)

	; print the jobs list
&bgc_jobs .(
	jsr bgpull
	sta buf+1

	lda #0
	sta jcnt
	
loop	lda jcnt
	cmp numpids
	bcs end
	; output job number
	jsr byte2bcd
	ldx #3
	jsr bcdout
	jsr spout

	ldx jcnt
	lda pidh,x
	jsr hexout
	lda pidl,x
	jsr hexout
	jsr spout

	lda index,x
	tay
:	lda cmdbuf,y
	beq next
	jsr chrout
	iny
	bpl :-

next	sty jidx
	jsr crlfout
	inc jcnt
	bne loop

end	jmp bgc_end
	.)

	.data
buflen	.byt 0
numpids	.byt 0

	.bss
jcnt	.byt 0
jidx	.byt 0
pidl	.dsb MAXCHLD
pidh	.dsb MAXCHLD
index	.dsb MAXCHLD
cmdbuf	.dsb CBUFLEN

	.text

	.)
 

#include "../common.a65"
	
	.)
