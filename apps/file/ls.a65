/****************************************************************************
   
    OS/A65 Version 2.0.0
    lib6502 ls program

    Copyright (C) 1997-1998 Andre Fachat 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

****************************************************************************/

#include "lib6502.i65"

main	.(
	.zero
argp	.word 0
	.text

	.(
	; stores argp in a/y to argp var
	jsr getopts
	bcc optsok

	lda #<usagetxt
	ldy #>usagetxt
	jmp strout

optsok	lda (argp),y
	beq jok
	tya
	adc argp
	sta argp
	bcc ok
	inc argp+1
	bne ok

jok	lda #<joker
	sta argp
	lda #>joker
	sta argp+1	; always not null

ok
	jsr crlfout

	lda argp
	ldy argp+1

	jsr fopendir
	bcc opened
	rts

opened	stx fileno
rd	ldx fileno
	lda #<entry
	ldy #>entry
	jsr freaddir
	bcc doit
eof
	ldx fileno
	jsr fclose
	lda #0
	rts
doit
				; skip perms for bytes free and media size
	lda entry+FD_PERM+1
	and #>S_IFMT
	cmp #>S_IFMFREE
	beq prlen
	cmp #>S_IFMSIZE
	beq prlen
				; skip extra info for disk name
	cmp #>S_IFMNAME
	beq name
				; skip all for short output (except bytes 
				; for bytes free and media size)
	ldy optlong
	bpl short
				; skip perms/grp/owner for single -l 
				; instead of -ll
	iny	
	iny			; if inc'd by two
	bpl chkdate		; and still neg, then we have -lll

	jsr showperms

	jsr showgrpown

	jmp prdate
chkdate
	dey
	bpl prlen
prdate
	jsr showdate
prlen
	jsr showlen
short	
	lda entry+FD_PERM+1
	and #>S_IFMT
	cmp #>S_IFMFREE
	bne name
	
	lda #<bytesfree
	ldy #>bytesfree
	jsr strout
	jmp next
name
	lda #<entry+FD_NAME
	ldy #>entry+FD_NAME
	jsr strout
next
	jsr crlfout
	jmp rd
	.)

showlen .(
	; long output
	lda entry+FD_LENGTH
	sta BIN
	lda entry+FD_LENGTH+1
	sta BIN+1
	lda entry+FD_LENGTH+2
	sta BIN+2
	lda entry+FD_LENGTH+3
	sta BIN+3
	jsr long2bcd
	ldx #9
	jsr bcdout
	jmp spout
	.)

showdate .(
	lda entry+FD_MDATE
	clc
	adc #<1990
	pha
	lda #>1990
	adc #0
	tay
	pla
	jsr intout
	lda #"-"
	jsr chrout
	lda entry+FD_MDATE+1
	jsr byte2bcd
	ldx #2		; we only need two digits
	jsr bcd0out
	lda #"-"
	jsr chrout
	lda entry+FD_MDATE+2
	jsr byte2bcd
	ldx #2
	jsr bcd0out

	lda #" "
	ldy entry+FD_MDATE+3
	jsr twoxout
	lda #":"
	ldy entry+FD_MDATE+4
	jsr twoxout
	lda #":"
	ldy entry+FD_MDATE+5
	jsr twoxout

	jmp spout
	.)

twoxout	.(
	jsr chrout
	tya
&twoout	jsr byte2bcd
	ldx #2
	jmp bcd0out
	.)

showgrpown .(
	lda entry+FD_OWNER
	ldy entry+FD_OWNER+1
	jsr intout
	jsr spout

	lda entry+FD_GROUP
	ldy entry+FD_GROUP+1
	jsr intout
	jmp spout
	.)

intout 	.(
	sta BIN
	sty BIN+1
	jsr word2bcd
	ldx #5
	jmp bcdout
	.)

showperms .(
	; user
	ror entry+FD_PERM+1
	lda #"r"
	jsr permout
	asl entry+FD_PERM+1	; restore FD_PERM+1, at least upper three bits
	rol entry+FD_PERM
	lda #"w"
	jsr permout
	rol entry+FD_PERM
	lda #"x"
	jsr permout

	; group
	rol entry+FD_PERM
	lda #"r"
	jsr permout
	rol entry+FD_PERM
	lda #"w"
	jsr permout
	rol entry+FD_PERM
	lda #"x"
	jsr permout

	; others
	rol entry+FD_PERM
	lda #"r"
	jsr permout
	rol entry+FD_PERM
	lda #"w"
	jsr permout
	rol entry+FD_PERM
	lda #"x"
	jsr permout

	jmp spout
	.)

permout	.(
	bcs out
	lda #"-"
out	jmp chrout
	.)

	.data

optslst	.asc "l",0
optsflg
optlong	.byt 0

joker	.asc "*", 0
usagetxt
	.asc 13,10,"Usage:"
	.asc 13,10," ls [opts] <dirmask>"
	.asc 13,10,"List the contents of a directory"
	.asc 13,10,"Options:"
	.asc 13,10," -l    print file size information"
	.asc 13,10," -ll   add modification date"
	.asc 13,10," -lll  add permissions"
	.byt 13,10,0

bytesfree 
	.asc "Bytes free.",0

	.bss
fileno	.byt 0
entry	.dsb FD_NAME+MAX_FILENAME
BIN	.byt 0,0,0,0
BCD	.byt 0,0,0,0,0
	.text

#include ../common.a65
	.)

