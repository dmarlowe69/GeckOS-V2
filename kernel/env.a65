/****************************************************************************
   
    OS/A65 Version 2.0.0
    Multitasking Operating System for 6502 Computers

    Copyright (C) 1989-1998 Andre Fachat 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

****************************************************************************/

/* 
 * globals that are needed in various parts of the kernel
 *
 * defining them separately here allows to use the independently
 * from the position of the actual code that uses it
 */

/*        Struct Task Environment Entry          */

/* we have three structs now: 
 * TE_* 	for task environment handling - not needed for system without
 *       	memory management
 * TT_*		task table, contains STD streams, etc
 *		Note that this table is divided into two tables, to accomodate
 *		for larger entries without having to reduce the number of
 *		potential tasks.
 * TH_*		thread table, has stack info and state
 */

/* We have a significant change in kernel ID allocation. Task and Thread
 * IDs now are directly pointers into the corresponding tables! 
 * Illegal kernel parameters may do some damage now, but it is supposed to be
 * faster.
 * If we need consecutive task IDs (probably lower 5 bits local, upper
 * three bits net node number), a simple lookup table should be the fastest 
 * and shortest way.
 *
 * When entering the kernel, the tasks PCBUF is copied or mapped to SYSBUF
 *
 * The Environment number 0 is the system environment, where the kernel
 * and all the devices operate. On simple systems (without MMU) the same
 * environment is used for all tasks.
 *
 * The scheduler changed in that all the waiting threads are just 
 * ignored. Instead the thread state must be set at, e.g. VSEM, or
 * SEND/RECEIVE by checking for waiting threads.
 */

/****************************************************/
/* first part of the taskTab */
#define	TT_STDCIN	0	/* Std console in */
#define	TT_STDIN	1	/* Stdin */
#define	TT_STDOUT	2	/* Stdout */
#define	TT_STDERR	3	/* Stderr */
#define	TT_PARENT	4	/* parent process ID */
#define	TT_SIGADR	5	/* addr of signal routine */
#define	TT_LIBSAVE	7	/* 2 byte stdlib pointer to process info */
#define	TT_ENV		9	/* environment number */
#define	TT_NTHREADS	10	/* number of running threads */
#define	TT_SIGMASK	11	/* mask of allowed signals */
#define	TT_SIGPEND	12	/* mask of pending signals */
#define	TT_STATUS	13

/* second part of taskTab */
#define	TT_PRIORITY	0	/* priority (i.e. irqcnt) of task */
#define	TT_RETCODE	1	/* return code after kill */
#define TT_EXECADDR	2	/* address where first thread was started */
#define	TT_NAME		4	/* name of the forked tasks (note: stored backwards) */

/* entries in both tables are the same size, to use the same index */
#define	TT_SLEN		14	/* length of task struct */


/****************************************************/
#define	TH_ST		0	/* thread state */
#define	TH_TASK		1	/* task ID */
#define	TH_SP		2	/* stack pointer */
#define	TH_LIBSAVE	3	/* 2 byte saved to make stdlib thread save */
#define	TH_PAR		5	/* 3 byte kernel parameter space */
#define	TH_SLEN		8	/* length of thread struct */

/****************************************************/
#ifndef ST_LEN
#define	ST_LEN	128		/* stack length */
#endif


#ifdef MAP_ZERO
	.zero
#else
	.data
#endif

actTask  .byt 0
actThread .byt 0

Syscnt	  .byt 0
Irqcnt	  .byt 0
#ifdef NEED_SLOCK
lockfl	  .byt 0
#endif

	  .data

Xenv	  .dsb ANZXENV
taskTab	  .dsb MAXNTASKS * TT_SLEN	/* first part of taskTab */
taskTab2  .dsb MAXNTASKS * TT_SLEN	/* second part of taskTab */
threadTab .dsb MAXNTHREADS * TH_SLEN

	  .text


